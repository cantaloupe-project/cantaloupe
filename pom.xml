<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>edu.illinois.library.cantaloupe</groupId>
  <artifactId>Cantaloupe</artifactId>
  <packaging>war</packaging>
  <version>3.4-SNAPSHOT</version>
  <name>Cantaloupe</name>
  <url>https://medusa-project.github.io/cantaloupe/</url>
  <inceptionYear>2015</inceptionYear>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <jetty.version>9.4.6.v20170531</jetty.version>
    <restlet.version>2.3.10</restlet.version>
    <surefire.version>2.20.1</surefire.version>
  </properties>

  <developers>
    <developer>
      <id>alexd</id>
      <name>Alex Dolski</name>
      <email>alexd@n-ary.net</email>
      <organization>University of Illinois at Urbana-Champaign Library</organization>
      <organizationUrl>http://www.library.illinois.edu/</organizationUrl>
      <roles>
        <role>founder</role>
        <role>lead</role>
        <role>developer</role>
        <role>debugger</role>
        <role>reviewer</role>
        <role>support</role>
        <role>maintainer</role>
      </roles>
      <timezone>-6</timezone>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git://github.com/medusa-project/cantaloupe</connection>
    <developerConnection>scm:git:git@github.com:medusa-project/cantaloupe</developerConnection>
    <tag>HEAD</tag>
    <url>https://github.com/medusa-project/cantaloupe</url>
  </scm>
  <issueManagement>
    <system>GitHub Issues</system>
    <url>https://github.com/medusa-project/cantaloupe/issues</url>
  </issueManagement>

  <dependencies>
    <!-- Used by RedisCache -->
    <dependency>
      <groupId>biz.paluch.redis</groupId>
      <artifactId>lettuce</artifactId>
      <version>4.3.1.Final</version>
    </dependency>
    <!-- The application logger. -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.3</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>1.2.3</version>
    </dependency>
    <!-- Used by AmazonS3Resolver and AmazonS3Cache -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-core</artifactId>
      <version>1.11.116</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-s3</artifactId>
      <version>1.11.116</version>
    </dependency>
    <!-- Object cache used for caching delegate script method invocations
    https://github.com/ben-manes/caffeine-->
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>2.3.5</version>
    </dependency>
    <!-- Used in tests to test for System.exit() -->
    <dependency>
      <groupId>com.github.stefanbirkner</groupId>
      <artifactId>system-rules</artifactId>
      <version>1.15.1</version>
      <scope>test</scope>
    </dependency>
    <!-- Used by HeapCache -->
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>3.2.0</version>
    </dependency>
    <!-- Used by JdbcResolverTest and JdbcCacheTest -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>1.4.190</version>
      <scope>test</scope>
    </dependency>
    <!-- Used by com.mortennobel.imagescaling -->
    <dependency>
      <groupId>com.jhlabs</groupId>
      <artifactId>filters</artifactId>
      <version>2.0.235</version>
    </dependency>
    <!-- Assists PDFBox in decoding JBIG2-encoded images -->
    <dependency>
      <groupId>com.levigo.jbig2</groupId>
      <artifactId>levigo-jbig2-imageio</artifactId>
      <version>1.6.5</version>
    </dependency>
    <!-- Used by AzureStorageResolver and AzureStorageCache-->
    <dependency>
      <groupId>com.microsoft.azure</groupId>
      <artifactId>azure-storage</artifactId>
      <version>5.2.0</version>
    </dependency>
    <!-- Provides a JDBC connection pool for JdbcResolver and JdbcCache -->
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>2.4.7</version>
    </dependency>
    <!-- Manages the application configuration. -->
    <dependency>
      <groupId>commons-configuration</groupId>
      <artifactId>commons-configuration</artifactId>
      <version>1.10</version>
    </dependency>
    <!-- IOUtils is used widely -->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
    </dependency>
    <!-- ImageIO -->
    <dependency>
      <groupId>javax.media</groupId>
      <artifactId>jai-core</artifactId>
      <version>1.1.3</version>
    </dependency>
    <dependency>
      <groupId>com.sun.media</groupId>
      <artifactId>jai_imageio</artifactId>
      <version>1.1</version>
      <exclusions>
        <exclusion>
          <groupId>javax.media</groupId>
          <artifactId>jai_core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- Provides an ImageIO plugin for DICOM -->
    <dependency>
      <groupId>dcm4che</groupId>
      <artifactId>dcm4che-core</artifactId>
      <version>2.0.29.v20170110_1407</version>
    </dependency>
    <dependency>
      <groupId>dcm4che</groupId>
      <artifactId>dcm4che-image</artifactId>
      <version>2.0.29.v20170110_1407</version>
    </dependency>
    <dependency>
      <groupId>dcm4che</groupId>
      <artifactId>dcm4che-imageio</artifactId>
      <version>2.0.29.v20170110_1407</version>
    </dependency>
    <dependency>
      <groupId>dcm4che</groupId>
      <artifactId>dcm4che-imageio-rle</artifactId>
      <version>2.0.29.v20170110_1407</version>
    </dependency>
    <!-- Enhanced ImageIO TIFF plugin supporting BigTIFF -->
    <dependency>
      <groupId>it.geosolutions.imageio-ext</groupId>
      <artifactId>imageio-ext-tiff</artifactId>
      <version>1.1.17</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.6</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.10</version>
    </dependency>
    <!-- This is used to fix a CVE-2015-6420 in commons-collections-3.2.1, a
    transitive dependency -->
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <version>3.2.2</version>
    </dependency>
    <!-- Provides PDFBox for PdfBoxProcessor. Note that there are also some
    other dependencies in this POM used only by PDFBox. -->
    <dependency>
      <groupId>org.apache.pdfbox</groupId>
      <artifactId>pdfbox</artifactId>
      <version>2.0.4</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <!-- Assists in parsing XMP metadata in RDF/XML -->
    <dependency>
      <groupId>org.apache.jena</groupId>
      <artifactId>jena-core</artifactId>
      <version>3.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.jena</groupId>
      <artifactId>jena-arq</artifactId>
      <version>3.4.0</version>
    </dependency>
    <!-- Used for media type detection -->
    <dependency>
      <groupId>org.apache.tika</groupId>
      <artifactId>tika-core</artifactId>
      <version>1.14</version>
    </dependency>
    <!-- Assists PDFBox in decoding certain PDFs -->
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk15on</artifactId>
      <version>1.55</version>
    </dependency>
    <!-- Supports <if> expressions in logback.xml -->
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
      <version>2.7.8</version>
    </dependency>
    <!-- Provides HTTP/2 support for Jetty (see org.eclipse.jetty.jetty-server) -->
    <dependency>
      <groupId>org.eclipse.jetty.http2</groupId>
      <artifactId>http2-client</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.http2</groupId>
      <artifactId>http2-http-client-transport</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.http2</groupId>
      <artifactId>http2-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <!-- Provides ALPN support for Jetty.
    N.B. This doesn't include ALPN support for Java 8, which requires a JAR
    on the boot classpath. -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-alpn-client</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-alpn-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <!-- Used by HttpResolver -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-http</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-io</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-client</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <!-- Provides the standalone servlet container -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-util</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-webapp</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <!-- Enables colorized Logback console output in Windows -->
    <dependency>
      <groupId>org.fusesource.jansi</groupId>
      <artifactId>jansi</artifactId>
      <version>1.13</version>
    </dependency>
    <!-- JRuby is used to execute delegate script methods. -->
    <dependency>
      <groupId>org.jruby</groupId>
      <artifactId>jruby-core</artifactId>
      <version>9.1.10.0</version>
    </dependency>
    <dependency>
      <groupId>org.jruby</groupId>
      <artifactId>jruby-stdlib</artifactId>
      <version>9.1.10.0</version>
      <!-- Without jruby-stdib, tests won't pass. This is not necessary for
      compile-time though. -->
      <scope>runtime</scope>
    </dependency>
    <!-- Restlet is our REST framework. -->
    <dependency>
      <groupId>org.restlet.jee</groupId>
      <artifactId>org.restlet</artifactId>
      <version>${restlet.version}</version>
    </dependency>
    <!-- Jackson for data serialization -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.9.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>2.9.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.0</version>
    </dependency>
    <!-- Makes Restlet log to SLF4J -->
    <dependency>
      <groupId>org.restlet.jee</groupId>
      <artifactId>org.restlet.ext.slf4j</artifactId>
      <version>${restlet.version}</version>
    </dependency>
    <!-- Enable usage of the application in a Servlet container -->
    <dependency>
      <groupId>org.restlet.jee</groupId>
      <artifactId>org.restlet.ext.servlet</artifactId>
      <version>${restlet.version}</version>
    </dependency>
    <!-- Provides Velocity for the landing and error page templates -->
    <dependency>
      <groupId>org.restlet.jee</groupId>
      <artifactId>org.restlet.ext.velocity</artifactId>
      <version>${restlet.version}</version>
      <exclusions>
        <!-- divert log messages to the log4j-over-slf4j bridge -->
        <exclusion>
          <groupId>log4j.log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
      <version>1.7</version>
    </dependency>
    <!-- Selenium is used to test the control panel, using a headless HtmlUnit
    browser. -->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>htmlunit-driver</artifactId>
      <version>2.21</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-api</artifactId>
      <version>2.53.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-support</artifactId>
      <version>2.53.0</version>
      <scope>test</scope>
    </dependency>
    <!-- Logging interface used by the application -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.21</version>
    </dependency>
    <!-- intercepts jcl log messages from Commons etc. -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>1.7.21</version>
    </dependency>
  </dependencies>

  <repositories>
    <!-- Provides JAI (javax.media and com.sun) -->
    <repository>
      <id>jboss-repository</id>
      <name>JBoss Repository</name>
      <url>https://repository.jboss.org/</url>
    </repository>
    <!-- Provides the DICOM ImageIO plugin -->
    <repository>
      <id>www.dcm4che.org</id>
      <name>dcm4che Repository</name>
      <url>http://www.dcm4che.org/maven2</url>
    </repository>
    <!-- Provides imageio-ext-tiff -->
    <repository>
      <id>imageio-ext-repository</id>
      <name>imageio-ext Repository</name>
      <url>http://maven.geo-solutions.it/</url>
    </repository>
    <!-- Provides Restlet -->
    <repository>
      <id>maven-restlet</id>
      <name>Restlet repository</name>
      <url>http://maven.restlet.com</url>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <configuration>
          <runOrder>random</runOrder>
          <reuseForks>false</reuseForks>
        </configuration>
      </plugin>

      <!-- Find bugs with mvn findbugs:findbugs findbugs:gui -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>3.0.1</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <!-- Unpack dependencies needed in standalone mode into the root, for
      compatibility with `java -jar` invocation. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.3</version>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludes>**/META-INF/*.MF,**/META-INF/*.txt</excludes>
              <includeGroupIds>
                <!-- direct dependencies -->
                commons-configuration, org.eclipse.jetty,javax.servlet
                <!-- dependencies of dependencies-->
                commons-lang, commons-logging
              </includeGroupIds>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}
              </outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Copy the classes needed for standalone mode into the root of the
      war file for compatibility with `java -jar` invocation. -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-standalone-classes-to-root</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <copy todir="${project.build.directory}/${project.artifactId}-${project.version}/">
                  <fileset dir="${project.build.directory}/classes/">
                    <include name="edu/illinois/library/cantaloupe/config/AbstractConfiguration.class" />
                    <include name="edu/illinois/library/cantaloupe/config/Configuration.class" />
                    <include name="edu/illinois/library/cantaloupe/config/ConfigurationException.class" />
                    <include name="edu/illinois/library/cantaloupe/config/ConfigurationFactory.class" />
                    <include name="edu/illinois/library/cantaloupe/config/ConfigurationWatcher.class" />
                    <include name="edu/illinois/library/cantaloupe/config/FileConfiguration.class" />
                    <include name="edu/illinois/library/cantaloupe/config/HeritableFileConfiguration.class" />
                    <include name="edu/illinois/library/cantaloupe/config/HeritablePropertiesConfiguration.class" />
                    <include name="edu/illinois/library/cantaloupe/config/Key.class" />
                    <include name="edu/illinois/library/cantaloupe/config/PropertiesConfiguration.class" />
                    <include name="edu/illinois/library/cantaloupe/util/FilesystemWatcher.class" />
                    <include name="edu/illinois/library/cantaloupe/util/FilesystemWatcher$Callback.class" />
                    <include name="edu/illinois/library/cantaloupe/util/SystemUtils.class" />
                    <include name="edu/illinois/library/cantaloupe/StandaloneEntry.class" />
                    <include name="edu/illinois/library/cantaloupe/WebServer.class" />
                  </fileset>
                </copy>
              </tasks>
            </configuration>
          </execution>

          <!-- Merge files in META-INF/services into one. Failure to do this
          causes a Jetty exception at startup in standalone mode:
          https://github.com/medusa-project/cantaloupe/issues/129 -->
          <execution>
            <id>merge-services</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <concat destfile="${project.build.directory}/${project.artifactId}-${project.version}/META-INF/services/combined">
                  <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}/META-INF/services"/>
                </concat>
                <delete>
                  <!-- TODO: this is brittle -->
                  <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}/META-INF/services"
                           includes="org*"/>
                </delete>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Create the war file, excluding the Servlet API jar, which the
      Servlet container will provide. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>create-war</id>
            <phase>package</phase>
            <goals>
              <goal>war</goal>
            </goals>
            <configuration>
              <archive>
                <manifest>
                  <mainClass>edu.illinois.library.cantaloupe.StandaloneEntry</mainClass>
                  <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                  <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                </manifest>
              </archive>
            </configuration>
          </execution>
        </executions>
        <!-- This plugin depends on a version of plexus-archiver that
        doesn't work with JDK 9. So, use a version that does.
        TODO: revisit this -->
        <dependencies>
          <dependency>
             <groupId>org.codehaus.plexus</groupId>
             <artifactId>plexus-archiver</artifactId>
             <version>3.5</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Assemble the created war into a release package. -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <appendAssemblyId>false</appendAssemblyId>
          <descriptors>
            <descriptor>${basedir}/build/assembly.xml</descriptor>
          </descriptors>
        </configuration>
        <!-- This plugin depends on a version of plexus-archiver that
        doesn't work with JDK 9. So, use a version that does.
        TODO: revisit this -->
        <dependencies>
          <dependency>
             <groupId>org.codehaus.plexus</groupId>
             <artifactId>plexus-archiver</artifactId>
             <version>3.5</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Enables running with mvn exec:java -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2.1</version>
        <configuration>
          <mainClass>edu.illinois.library.cantaloupe.StandaloneEntry</mainClass>
        </configuration>
      </plugin>

      <!-- Build dependency check -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <dependencies>
          <dependency>
            <groupId>de.is24.maven.enforcer.rules</groupId>
            <artifactId>illegal-transitive-dependency-check</artifactId>
            <version>1.7.4</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>enforce</id>
            <phase>verify</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <illegalTransitiveDependencyCheck implementation="de.is24.maven.enforcer.rules.IllegalTransitiveDependencyCheck">
                  <reportOnly>false</reportOnly>
                  <useClassesFromLastBuild>true</useClassesFromLastBuild>
                  <suppressTypesFromJavaRuntime>true</suppressTypesFromJavaRuntime>
                  <!-- to ignore certain packages...
                  <regexIgnoredClasses>
                    <regexIgnoredClass>javax\..+</regexIgnoredClass>
                  </regexIgnoredClasses>
                   -->
                </illegalTransitiveDependencyCheck>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <id>nodeps</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${surefire.version}</version>
            <configuration>
              <runOrder>random</runOrder>
              <reuseForks>false</reuseForks>
              <excludes>
                <exclude>AmazonS3*Test</exclude>
                <exclude>AzureStorage*Test</exclude>
                <exclude>FfmpegProcessorTest</exclude>
                <exclude>GraphicsMagickProcessorTest</exclude>
                <exclude>ImageMagickProcessorTest</exclude>
                <exclude>KakaduProcessorTest</exclude>
                <exclude>OpenJpegProcessorTest</exclude>
                <exclude>RedisCacheTest</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>freedeps</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${surefire.version}</version>
            <configuration>
              <runOrder>random</runOrder>
              <reuseForks>false</reuseForks>
              <excludes>
                <exclude>Amazon*Test</exclude>
                <exclude>Azure*Test</exclude>
                <exclude>Kakadu*Test</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
